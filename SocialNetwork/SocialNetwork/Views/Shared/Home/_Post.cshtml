@model Post

@{
	TimeSpan timeSpanSincePosted = DateTime.UtcNow.Subtract(Model.DateCreated);

	string displayTime = timeSpanSincePosted switch
	{
		var t when t.TotalDays >= 1 => $"{(int)t.TotalDays}d ago",
		var t when t.TotalHours >= 1 => $"{(int)t.TotalHours}h ago",
		var t when t.TotalMinutes >= 1 => $"{(int)t.TotalMinutes}m ago",
		_ => "Just now"
	};
}

<div class="card mb-3">
	<div class="card-body">
		<!-- post header -->
		<div>
			<div class="d-flex justify-content-between align-items-center">
				<div class="d-flex align-items-center">
					<img src="@(Model.User.ProfilePictureUrl ?? "images/user.png")" class="me-2" width="40" height="40">
					<div>
						<strong>@Model.User.FullName</strong> <br>
						<small class="text-muted">@@@Model.User.UserHandle</small>
					</div>
				</div>
				<div class="dropdown">
					<button class="btn btn-light btn-sm" data-bs-toggle="dropdown" aria-expanded="false">
						<ion-icon name="ellipsis-horizontal"></ion-icon>
					</button>
					<ul class="dropdown-menu dropdown-menu-end">
						<li><a class="dropdown-item text-danger" href="#">Delete post</a></li>
						<li><a class="dropdown-item" href="#">Edit post</a></li>
						<li><a class="dropdown-item text-danger" href="#">Report</a></li>
					</ul>
				</div>

			</div>
			<small class="text-muted" title="@displayTime">@Model.DateCreated.ToString("HH:mm  MM/dd/yyyy")</small>
		</div>

		<!-- post text -->
		<p class="mt-2">
			@Model.Content
		</p>

		<!-- image placeholder -->                                                                        <!-- onerror="this.style.display='none' ;" -->
		@if (!string.IsNullOrEmpty(Model.ImageUrl))
		{
			<div class="text-center">
				<img id="postImage" src="@Model.ImageUrl" class="img-fluid border" alt="Post Image" onerror="this.src='images/placeholder.jpg';" style="max-height: 500px; object-fit: cover; border-radius: 0;" />
			</div>
		}

		<!-- post footer -->
		<div class="d-flex mt-2">
			<div>
				<button class="btn btn-light btn-sm">
					<ion-icon name="thumbs-up-outline"></ion-icon>
				</button>
				<span>0</span>
				<button class="btn btn-light btn-sm">
					<ion-icon name="thumbs-down-outline"></ion-icon>
				</button>
				<span>0</span>
				<button class="btn btn-light btn-sm">
					<ion-icon name="chatbox-outline"></ion-icon>
				</button>
				<span>0</span>
				<a href="#">@Model.Comments.Count</a>
			</div>
			<div class="d-flex align-items-center ms-auto">
				<form asp-controller="Home" asp-action="TogglePostFavorite">
					<input type="hidden" name="postId" value="@Model.Id" />
					<button type="submit" class="btn btn-light btn-sm me-2 @(Model.Favorites.Any(n=> n.UserId==1)? "text-black-500 bt-black-100" : "")">
						<ion-icon name="@(Model.Favorites.Any(n=> n.UserId==1)? "bookmark" : "bookmark-outline")"></ion-icon> 
					</button>
				</form>
				

				<button class="btn btn-light btn-sm me-2">
					<ion-icon name="resize-outline"></ion-icon>
				</button>
			</div>
		</div>

		<!-- comment-section -->
		<div>
			<div class=" p2.5 border-t border-grey-100 font-normal space-y-3 relative">

				@foreach(var comment in Model.Comments.OrderByDescending(n => n.DateCreated).Take(3))
				{

				TimeSpan commentTimeSpanSincePosted = DateTime.UtcNow.Subtract(comment.DateCreated);

                string commentDisplayTime = commentTimeSpanSincePosted switch
                {
	                var t when t.TotalDays >= 1 => $"{(int)t.TotalDays}d ago",
	                var t when t.TotalHours >= 1 => $"{(int)t.TotalHours}h ago",
	                var t when t.TotalMinutes >= 1 => $"{(int)t.TotalMinutes}m ago",
	                _ => "Just now"
                };

				   <div class="flex items-start gap-3 relative">
					   <a>
						   <img src="@(comment.User.ProfilePictureUrl ?? "images/user.png")" class="w-6 h-6 mt-1 rounded-full" />
					   </a>
					   <div class="flex-1">
						   <div class="flex justify-content-between">
							   <a class="text-black font-medium inline-block flex-grow">
								   @comment.User.FullName
							   </a>
                               <small>@commentDisplayTime</small>
						   </div>
                           <div class="flex items-center justify-between">
                               <p class="mt-0.5">
                                   @comment.Content
                               </p>\

							   <form asp-controller="Home" asp-action="RemovePostComment">
								   <input type = "hidden" name="commentId" value="@comment.Id"/>\
								   <botton typeof="submit" class="text-red-500 text-xs ml-2" title="Remove post comment">
									   <ion-icon name="trash-outline"></ion-icon>
								   </botton>
							   </form>
                           </div>
						   
					   </div>

				   </div> 				
				}

				@if(Model.Comments.Count >= 3)
				{
				   <div class="p-1.5">
                       <a>
					       Show all comments
					   </a>
				   </div>
				}
				
			</div>

			<form asp-controller="Home" asp-action="AddPostComment">
				<div class="sm:px-4 sm:py-3 p2.5 border-t border-grey-100 flex item-center gap-1">
					<img src="~/images/avatar/user.png" class="w-6 h-6 rounded-full" />

						<input type="hidden" name="postId" value="@Model.Id"/>
						<div class="comment-section mt-3">
							<textarea name="content" class="form-control" rows="1" placeholder="..."></textarea>
						</div>

						<button type="submit" class="btn btn-primary btn-sm mt-2 float-end me-4 me-sm-5">Post Comment</button>
					
				</div>
			</form>		
		</div>
	</div>
</div>